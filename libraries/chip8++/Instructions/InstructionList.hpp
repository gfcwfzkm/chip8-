#ifndef _CHIP8_INSTRUCTIONLIST_HPP
#define _CHIP8_INSTRUCTIONLIST_HPP

/** @brief CHIP-8 instruction list
 *
 * This file contains a list of all CHIP-8 instructions
 * that can be executed by the CHIP-8 interpreter.
 * Since this file is autogenerated by a python script,
 * do not modify this file manually.
 */

#include "Instruction.hpp"
#include "00E0.hpp"
#include "00EE.hpp"
#include "1NNN.hpp"
#include "2NNN.hpp"
#include "3XKK.hpp"
#include "4XKK.hpp"
#include "5XY0.hpp"
#include "6XKK.hpp"
#include "7XKK.hpp"
#include "8XY0.hpp"
#include "8XY1.hpp"
#include "8XY2.hpp"
#include "8XY3.hpp"
#include "8XY4.hpp"
#include "8XY5.hpp"
#include "8XY6.hpp"
#include "8XY7.hpp"
#include "8XYE.hpp"
#include "9XY0.hpp"
#include "ANNN.hpp"
#include "BNNN.hpp"
#include "CXKK.hpp"
#include "DXYN.hpp"
#include "EX9E.hpp"
#include "EXA1.hpp"
#include "FX07.hpp"
#include "FX0A.hpp"
#include "FX15.hpp"
#include "FX18.hpp"
#include "FX1E.hpp"
#include "FX29.hpp"
#include "FX33.hpp"
#include "FX55.hpp"
#include "FX65.hpp"

namespace CHIP8::Instructions 
{
	class InstructionList
	{
	public:
		/** @brief Number of instructions in the list */
		static constexpr int INSTRUCTION_COUNT = 34;

		/** @brief Get an instruction by its index
		 *
		 * @param instr Index of the instruction
		 * @return Pointer to the instruction
		 */
		static std::shared_ptr<Instruction> GetInstruction(int instr) {
			if (instr >= INSTRUCTION_COUNT) return nullptr;
			switch(instr) {
				case 0: return std::make_shared<I00E0>();
				case 1: return std::make_shared<I00EE>();
				case 2: return std::make_shared<I1NNN>();
				case 3: return std::make_shared<I2NNN>();
				case 4: return std::make_shared<I3XKK>();
				case 5: return std::make_shared<I4XKK>();
				case 6: return std::make_shared<I5XY0>();
				case 7: return std::make_shared<I6XKK>();
				case 8: return std::make_shared<I7XKK>();
				case 9: return std::make_shared<I8XY0>();
				case 10: return std::make_shared<I8XY1>();
				case 11: return std::make_shared<I8XY2>();
				case 12: return std::make_shared<I8XY3>();
				case 13: return std::make_shared<I8XY4>();
				case 14: return std::make_shared<I8XY5>();
				case 15: return std::make_shared<I8XY6>();
				case 16: return std::make_shared<I8XY7>();
				case 17: return std::make_shared<I8XYE>();
				case 18: return std::make_shared<I9XY0>();
				case 19: return std::make_shared<IANNN>();
				case 20: return std::make_shared<IBNNN>();
				case 21: return std::make_shared<ICXKK>();
				case 22: return std::make_shared<IDXYN>();
				case 23: return std::make_shared<IEX9E>();
				case 24: return std::make_shared<IEXA1>();
				case 25: return std::make_shared<IFX07>();
				case 26: return std::make_shared<IFX0A>();
				case 27: return std::make_shared<IFX15>();
				case 28: return std::make_shared<IFX18>();
				case 29: return std::make_shared<IFX1E>();
				case 30: return std::make_shared<IFX29>();
				case 31: return std::make_shared<IFX33>();
				case 32: return std::make_shared<IFX55>();
				case 33: return std::make_shared<IFX65>();
			}
			return nullptr;
		}
	};
}

#endif /* _CHIP8_INSTRUCTIONLIST_HPP */